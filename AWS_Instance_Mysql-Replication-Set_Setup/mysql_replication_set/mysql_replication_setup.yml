---
- name: Install and Configure MySQL Replication
  hosts: mysql_servers
  become: yes
  vars_files:
    - vars.yml

  tasks:
    - name: Install MySQL 8
      apt:
        name: mysql-server
        state: present
        update_cache: yes

    - name: Start MySQL service
      service:
        name: mysql
        state: started
        enabled: yes

    - name: Install Python MySQL library (PyMySQL)
      apt:
        name: python3-pymysql
        state: present
        update_cache: yes
      when: ansible_python.version.major == 3

    - name: Install Python MySQL library (MySQL-python)
      apt:
        name: python-mysqldb
        state: present
        update_cache: yes
      when: ansible_python.version.major == 2

    - name: Change MySQL root user authentication to 'mysql_native_password'
      shell: |
        mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH 'mysql_native_password' BY '{{ mysql_root_password }}'; FLUSH PRIVILEGES;"
      ignore_errors: yes

    - name: Set MySQL root password
      mysql_user:
        login_user: root
        login_password: '{{ mysql_root_password }}'
        user: root
        password: "{{ mysql_root_password }}"
        host_all: yes

    - name: Allow MySQL to listen on all interfaces
      lineinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        regexp: '^bind-address\s*='
        line: 'bind-address = 0.0.0.0'
        state: present
      notify: restart mysql

    - name: Set unique MySQL server-id
      lineinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        regexp: '^server-id\s*='
        line: "server-id = {{ 1 + ansible_play_hosts.index(inventory_hostname) }}"
        create: yes
        state: present
      notify: restart mysql

    - name: Create root user for remote access
      mysql_user:
        login_user: root
        login_password: '{{ mysql_root_password }}'
        name: root
        password: '{{ mysql_root_password }}'
        host: '%'
        state: present
      ignore_errors: yes

    - name: Grant privileges to remote root user
      mysql_user:
        login_user: root
        login_password: '{{ mysql_root_password }}'
        name: root
        host: '%'
        priv: '*.*:ALL,GRANT'
        state: present
        append_privs: yes
      ignore_errors: yes

    - name: Determine if server is the first in the group (master)
      set_fact:
        is_master: "{{ inventory_hostname == master_host }}"

    - name: Configure server as master
      block:
        - name: Create a replication user
          mysql_user:
            login_user: root
            login_password: "{{ mysql_root_password }}"
            name: repl_user
            password: "{{ repl_password }}"
            priv: '*.*:REPLICATION SLAVE'
            host: '%'
            state: present

        - name: Get Master status
          command: mysql -u root -p"{{ mysql_root_password }}" -e "SHOW MASTER STATUS;"
          register: master_status
          changed_when: false

        - name: Set master status facts
          set_fact:
            master_log_file: "{{ master_status.stdout_lines[1].split('\t')[0] }}"
            master_log_pos: "{{ master_status.stdout_lines[1].split('\t')[1] }}"
      when: is_master

    - name: Configure server as slave
      block:
        - name: Stop slave
          command: mysql -u root -p"{{ mysql_root_password }}" -e "STOP SLAVE;"

        - name: Set up replication
          command: >
            mysql -u root -p"{{ mysql_root_password }}" -e
            "CHANGE MASTER TO
            MASTER_HOST='{{ master_host }}',
            MASTER_USER='repl_user',
            MASTER_PASSWORD='{{ repl_password }}',
            MASTER_LOG_FILE='{{ hostvars[groups['mysql_servers'][0]]['master_log_file'] }}',
            MASTER_LOG_POS={{ hostvars[groups['mysql_servers'][0]]['master_log_pos'] }};
            START SLAVE;"

        - name: Start slave
          command: mysql -u root -p"{{ mysql_root_password }}" -e "START SLAVE;"

        - name: Check slave status
          command: mysql -u root -p"{{ mysql_root_password }}" -e "SHOW SLAVE STATUS\G"
          register: slave_status
          changed_when: false
      when: not is_master

  handlers:
    - name: restart mysql
      service:
        name: mysql
        state: restarted